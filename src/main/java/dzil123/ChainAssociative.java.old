package dzil123;

import java.lang.reflect.Constructor;
import java.util.Arrays;

public class ChainAssociative{
    public static Derivable Chain(Class <? extends Associative> type, Derivable term1, Derivable[] terms) {
        try {
            Constructor<?> constuct = type.getConstructor(Derivable.class, Derivable.class);

            if (terms.length == 0) {
                return term1;
            } else if (terms.length == 1) {   
                return (Derivable) constuct.newInstance(term1, terms[0]);
            }

            return (Derivable) constuct.newInstance(term1, ChainAssociative.Chain(type, terms));

        } catch (Exception e) {}

        return null;
    }

    public static Derivable Chain(Class <? extends Associative> type, Derivable[] terms) {
        try {
            Constructor<?> constuct = type.getConstructor(Derivable.class, Derivable.class);

            if (terms.length == 0) {
                return new Constant(1);
            } else if (terms.length == 1) {
                return terms[0];
            } else if (terms.length == 2) {
                return (Derivable) constuct.newInstance(terms[0], terms[1]);
            }

            Derivable firstTwoTerms = (Derivable) constuct.newInstance(terms[0], terms[1]);
            Derivable[] restOfTerms = Arrays.copyOfRange(terms, 2, terms.length);

            return ChainAssociative.Chain(type, firstTwoTerms, restOfTerms);
        } catch (Exception e) {}

        return null;
    }
}
